#
# This cfg file include configuration for test of package FBADefectFeeTransactionCore

# DB configuration for DAO integration test that connect devo db 
# instance directly through eclipse
# 
# The configuration is copied from SSOFCommon packages. 

*.*.jdbc.ssof.fbaDataSource = {
   valueClass = "com.mchange.v2.c3p0.ComboPooledDataSource";
   valueScope = singleton;
   driverClass = amazon.jdbc.driver.SecureDriver;

   checkoutTimeout  = 50000000;               # createConnection() timeout in millis
   maxIdleTime      = 1800;               # Time out after staying idle for 30 mins. New session settings would be picked up on periodic refresh in low load.
   maxIdleTimeExcessConnections = 120;    # Time out "extra" connections sooner
   minPoolSize      = 2;                  # This should be a couple more connections than needed in the steady state
   initialPoolSize  = 2;                  # Should be the same as minPoolSize
   maxPoolSize      = 15;                 # override this per-service if needed
   acquireIncrement = 2;                  # get this many at a time, even if you only need 1.
   acquireRetryAttempts = 3;              # Retry 3 times because you can't keep retrying forever (only until the connection checkout timeouts)...
   acquireRetryDelay    = 1000;           # ...every 1 s (should be less than checkoutTimeout / acquireRetryAttempts+1).
   idleConnectionTestPeriod = 60;         # Test every 1-2 minutes for broken connections.  Test should be pretty cheap.
   preferredTestQuery = "SELECT 1 FROM DUAL";  # We should define an empty table like DUAL that can only be queried on the primary
   maxStatementsPerConnection = 0;        # rafn: statement pooling doesn't buy much, set to default = 0.  https://w.amazon.com/?C3P0#Statement_Cache_Problem
   numHelperThreads = 16;                 # we want one more helper thread that max pool size to keep connection checkins from being starved                                          

   # Specify encrypted password for PROD and MASTER environments
   # encryptedPassword = "{amzn-use-secure}";
   # In non-production environment like TEST or custom you can use
   # use plain password
   user = "oltp_user";
   password = "{amzn-use-secure}";
   
};

*.NAFulfillment.jdbc.ssof.fbaDataSource += {
    jdbcUrl="jdbc:amazon;moduleName=$APP:oracle:thin:@tfba1na-orasvr.db.amazon.com:60426:tfba1na";

    # attempt to avoid oracle DDOS blocking in devo. Will not impact prod as long as there is a prod override.
    # https://cr.amazon.com/r/574905/, https://w.amazon.com/index.php/BrazilConfigSyntax#.27Operator_.2B.3D.27
};

*.EUFulfillment.jdbc.ssof.fbaDataSource += {
    jdbcUrl="jdbc:amazon;moduleName=$APP:oracle:thin:@tfba1eu-orasvr.db.amazon.com:61675:tfba1eu";

    # attempt to avoid oracle DDOS blocking in devo. Will not impact prod as long as there is a prod override.
    # https://cr.amazon.com/r/574905/, https://w.amazon.com/index.php/BrazilConfigSyntax#.27Operator_.2B.3D.27
};

*.FEFulfillment.jdbc.ssof.fbaDataSource += {
    jdbcUrl="jdbc:amazon;moduleName=$APP:oracle:thin:@tfba1fe-orasvr.db.amazon.com:61665:tfba1fe";

    # attempt to avoid oracle DDOS blocking in devo. Will not impact prod as long as there is a prod override.
    # https://cr.amazon.com/r/574905/, https://w.amazon.com/index.php/BrazilConfigSyntax#.27Operator_.2B.3D.27
};

*.CNFulfillment.jdbc.ssof.fbaDataSource += {
    jdbcUrl="jdbc:amazon;moduleName=$APP:oracle:thin:@tfba1cn-orasvr.db.amazon.com:63422:tfba1cn";

    # attempt to avoid oracle DDOS blocking in devo. Will not impact prod as long as there is a prod override.
    # https://cr.amazon.com/r/574905/, https://w.amazon.com/index.php/BrazilConfigSyntax#.27Operator_.2B.3D.27
    # attempt to avoid oracle DDOS blocking in devo
};


################################################################################
# MRP (Reporting) DataSource Configuration
################################################################################
*.*.jdbc.ssof.mrpDataSource = {
   valueClass = "com.mchange.v2.c3p0.ComboPooledDataSource";
   valueScope = singleton;
   driverClass = amazon.jdbc.driver.SecureDriver;

   checkoutTimeout  = 5000;               # createConnection() timeout in millis
   maxIdleTime      = 1800;               # Time out after staying idle for 30 mins. New session settings would be picked up on periodic refresh in low load.
   maxIdleTimeExcessConnections = 120;    # Time out "extra" connections sooner
   minPoolSize      = 2;                  # This should be a couple more connections than needed in the steady state
   initialPoolSize  = 2;                  # Should be the same as minPoolSize
   maxPoolSize      = 15;                 # override this per-service if needed
   acquireIncrement = 2;                  # get this many at a time, even if you only need 1.
   acquireRetryAttempts = 3;              # Retry 3 times because you can't keep retrying forever (only until the connection checkout timeouts)...
   acquireRetryDelay    = 1000;           # ...every 1 s (should be less than checkoutTimeout / acquireRetryAttempts+1).
   idleConnectionTestPeriod = 60;         # Test every 1-2 minutes for broken connections.  Test should be pretty cheap.
   preferredTestQuery = "SELECT 1 FROM DUAL";  # We should define an empty table like DUAL that can only be queried on the primary
   maxStatementsPerConnection = 0;        # rafn: statement pooling doesn't buy much, set to default = 0.  https://w.amazon.com/?C3P0#Statement_Cache_Problem
   numHelperThreads = 16;                 # we want one more helper thread that max pool size to keep connection checkins from being starved                                          

   # Specify encrypted password for PROD and MASTER environments
   # encryptedPassword = "{amzn-use-secure}";
   # In non-production environment like TEST or custom you can use
   # use plain password
   user = "oltp_user";
   password = "{amzn-use-secure}";
};


*.NAFulfillment.jdbc.ssof.mrpDataSource += {
    jdbcUrl="jdbc:amazon;moduleName=$APP:oracle:thin:@tmrp1na-orasvr.db.amazon.com:65405:tmrp1na";

    # attempt to avoid oracle DDOS blocking in devo. Will not impact prod as long as there is a prod override.
    # https://cr.amazon.com/r/574905/, https://w.amazon.com/index.php/BrazilConfigSyntax#.27Operator_.2B.3D.27
    checkoutTimeout  = 11000;
};

*.*.MIC.VendorComplianceDefect.DefectSurface.DefectStatus.MICSurfaced = (
    "CONFIRMED",
    "REVOKED"
);
